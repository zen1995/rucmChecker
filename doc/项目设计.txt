类图说明：
我们的设计主要分为N个部分，分别是规则解析部分，规则实体/检查部分，报告部分，RUCM解析以及自然语言处理部分。接下来分别说明每个部分重要的的具体类图设计

规则解析部分：
规则解析由类RuleLoader和RuleDB组成，RuleLoader的作用是将规则文件解析成ComplexRule/DefaultRule等类，装入ruleDB中。
RuleLoader:
load()->bool：进行文件解析。文件解析结果将直接存放在RuleDB中。返回值代表是否解析成功
chekFileFormat(rule:dict)->bool:检查文件格式是否符合要求，包含检查相应的字段是否存在，字段的值是否合法，各个字段之间的关系是否符合约束
parseDefaultRule(rule:dict):解析默认规则
parseComplexRule(rule:dict):解析复合规则字典,具体规则格式详见rule-template.md
parseSimpleRule(rule:dict):解析简单规则
checkComplexRule(rule:dict):检查复合规则格式
checkSimpleRule(rule:dict):检查简单规则格式
RuleDB:
ruleDB为静态数据类，它根据两部分组成，分别是用户定义规则列表(userRules:list)和默认规则列表(userRules:list)组成


规则实体部分：
Rule:
所有的规则都继承自rule基类，Rule的子类包括DefaultRuleXXX，ComplexRule（SimpleRule不是Rule的子类）。
id:rule规则表示
description：规则描述
status：是否启用
rtype:规则的类表，rtype必须取'user','system'之一

ComplexRule：
一个复合规则可以由多个简单规则的检查结果综合而成
applyScope：规则的作用域，目前作用于可以为rucm中的action字段或者所有的句子
simpleRule：简单规则列表
op：对简单规则的综合逻辑操作

SimpleRule：
一个simpleRule只检查一个句子中的一个字段，它的检查方式可以抽象为某个句子成分在/不在目标列表中
target:要检查的句子成分，具体取值可以参见rule-template.md
op：最检查目标的逻辑约束可以是in/not in
val：允许/禁止列表
check(setence:Sentence):检查句子
dynamicFill:(s:str):动态填充val，比如填充rucm中的actor

DefaultRuleXXX:
无法被抽象成ComplexRule形式的规则

报告部分：
ErrorInfo:
包含检查错误结果的基本信息，包括检查出错误的规则，相应的用例名以及句子
Reporter:
静态类，用于生成报告

RUCM部分
RUCMRooT：
存储所有的RUCM信息包括actor列表域usecase列表，并且提供相应get方法方便rule查询信息
usecases:用例列表
actors：actor列表
getActors():获得actor列表
getAllSteps():获得所有step列表
getAllSentences():获得所有的句子
getUseCase(usecasename:str):查找相应的usecase

Usecase：
对应一个用例
id：用例id
name:usecase的名字
briefDescription:usecase简单描述
preConddition:前置条件
include:该用例所包含的用例
extend：该用例extend的用例
generalization:该用例泛化的用例
basicFlow：用例的基本流
specificFlows:用例分支流
findRfs(flowname:str,stepIndex:int)->bool:判断名字叫flowname的flow中是否存在序号stepIndex的步骤

Flow:
type：区分basicflow/Specific Flow/Global Alternative Flow
name：flow名称
postcondition：flow的postcondition
steps:构成flow的step
RfsStatement:specific flow的RFS字段
id:flow的id


step:
一个step可以由多个sentence构成
index：step的序号
val：step的字符串
sentences：step字句
parse_step():解析句子

sentence:
一个sentence可以是一个正常的自然语言句子，也可以是一个关键字（IF/ELSE 等）
val：sentence字符串
nature：sentence的关键字类别

RUCMBase：
所有的RUCM元素的基类，提供向上查找父节点以及所属Usecase的相应属性

word：
val：词的字符串
type：词的类别（noun/adj/verb等）
tense：词的时态

自然语言处理部分：
该部分由多个方法组成，构成nulputils模块，该的主要功能是解析句子/词语成分，并且给予相应的自然语言标注



MainWindow
loadRucm():加载RUCM文件按钮对应函数
saveRule():保存rule按钮对应函数，用户选择文件路径后将rule保存其中
loadRule():加载rule按钮对应函数，加载相应rule到rules属性中
startCheck():开始检查按钮，检查完成后，将报告保存到./report/目录下
deleteRule(rtype:str,index:int):删除相应的规则，其中rtype取值范围与Rule中的rtyle取值
addRule():添加rule按钮对应函数，函数结束后将新增rule添加到其中
rucmPath():RUCM文件路径

EditWindow
parent：主窗口
finishEdit():完成编辑，生成对应对应的rule

GUI_Utils：
loadRule(filePath:str)：检查格式是否正确，若正确返回(defaultRuleList,userRuleList)，若不正确，返回NULL
loadRucm():装载rucm地址
startCheck():开始检查